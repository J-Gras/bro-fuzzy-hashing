%%{
#include "FuzzyHashVal.h"

using namespace plugin::JGras_FuzzyHashing;
%%}

## Constructs an ssdeep handle to enable incremental hash computation. You can
## feed data to the returned opaque value with :zeek:id:`ssdeep_hash_update` and
## eventually need to call :zeek:id:`ssdeep_hash_finish` to finish the
## computation and get the hash digest.
##
## Returns: The opaque handle associated with this hash computation.
##
## .. zeek:see:: ssdeep_hash_update ssdeep_hash_finish
##
function ssdeep_hash_init%(%): opaque of ssdeep
	%{
	auto digest = zeek::make_intrusive<SSDeepVal>();
	digest->Init();
	return std::move(digest);
	%}

## Updates the ssdeep value associated with a given index. It is required to
## call :zeek:id:`ssdeep_hash_init` once before calling this function.
##
## handle: The opaque handle associated with this hash computation.
##
## data: The data to add to the hash computation.
##
## Returns: True on success.
##
## .. zeek:see:: ssdeep_hash_init ssdeep_hash_finish
##
function ssdeep_hash_update%(handle: opaque of ssdeep, data: string%): bool
	%{
	bool rc = static_cast<FuzzyHashVal*>(handle)->Feed(data->Bytes(), data->Len());
	return zeek::val_mgr->Bool(rc);
	%}

## Returns the final ssdeep digest of an incremental hash computation.
##
## handle: The opaque handle associated with this hash computation.
##
## Returns: The hash value associated with the computation of *handle*.
##
## .. zeek:see:: ssdeep_hash_init ssdeep_hash_update
##
function ssdeep_hash_finish%(handle: opaque of ssdeep%): string
	%{
	return static_cast<FuzzyHashVal*>(handle)->Get();
	%}

## Constructs an tlsh handle to enable incremental hash computation. You can
## feed data to the returned opaque value with :zeek:id:`tlsh_hash_update` and
## eventually need to call :zeek:id:`tlsh_hash_finish` to finish the computation
## and get the hash digest.
##
## Returns: The opaque handle associated with this hash computation.
##
## .. zeek:see:: tlsh_hash_update tlsh_hash_finish
##
function tlsh_hash_init%(%): opaque of tlsh
	%{
	auto digest = zeek::make_intrusive<TLSHVal>();
	digest->Init();
	return std::move(digest);
	%}

## Updates the tlsh value associated with a given index. It is required to
## call :zeek:id:`tlsh_hash_init` once before calling this function.
##
## handle: The opaque handle associated with this hash computation.
##
## data: The data to add to the hash computation.
##
## Returns: True on success.
##
## .. zeek:see:: tlsh_hash_init tlsh_hash_finish
##
function tlsh_hash_update%(handle: opaque of tlsh, data: string%): bool
	%{
	bool rc = static_cast<FuzzyHashVal*>(handle)->Feed(data->Bytes(), data->Len());
	return zeek::val_mgr->Bool(rc);
	%}

## Returns the final tlsh digest of an incremental hash computation.
##
## handle: The opaque handle associated with this hash computation.
##
## Returns: The hash value associated with the computation of *handle*.
##
## .. zeek:see:: tlsh_hash_init tlsh_hash_update
##
function tlsh_hash_finish%(handle: opaque of tlsh%): string
	%{
	return static_cast<FuzzyHashVal*>(handle)->Get();
	%}

## Sets the digest to the provided TLSH hash value.
##
## handle: The opaque handle associated with the hash computation.
##
## tlsh_hash: The string value to set the hash to.
##
## Returns: True, if the provided string is a valid TLSH hash.
##
## .. bro:see:: tlsh_hash_init
##
function tlsh_from_string%(handle: opaque of tlsh, tlsh_hash: string%): bool
	%{
	auto digest = static_cast<TLSHVal*>(handle);
	auto valid = digest->SetHash(tlsh_hash->CheckString());
	return zeek::val_mgr->Bool(valid);
	%}

## Calculate difference of two TLSH hashes.
##
## handle_a: The opaque handle for hash a.
##
## handle_b: The opaque handle for hash b.
##
## len_diff: If set to T, length will be included in the difference calculation.
##
## Returns: Score for the difference between the hashes of handle_a and handle_b.
##
## .. bro:see:: tlsh_hash_init
##
function tlsh_total_diff%(handle_a: opaque of tlsh, handle_b: opaque of tlsh, len_diff: bool &default=T%): int
	%{
	auto val_a = static_cast<TLSHVal*>(handle_a);
	auto val_b = static_cast<TLSHVal*>(handle_b);

	auto diff = val_a->TotalDiff(val_b, len_diff);
	return zeek::val_mgr->Int(diff);
	%}
